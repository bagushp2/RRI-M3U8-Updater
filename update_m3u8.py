#!/usr/bin/env python3
"""
Scrape halaman https://rri.co.id/stream/video untuk menemukan URL .m3u8
Tulis hasil ke file rri.m3u8 (playlist sederhana) di repo workspace.
Exit code:
 - 0 = success (file written or unchanged)
 - 2 = gagal menemukan URL
"""

import re
import sys
from urllib.parse import urljoin

import requests
from bs4 import BeautifulSoup

PAGE_URL = "https://rri.co.id/stream/video"
OUT_FILE = "rri.m3u8"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (compatible; rri-m3u8-updater/1.0)"
}

# regex for m3u8 urls
M3U8_RE = re.compile(r"https?://[^"]+?\.m3u8")


def find_m3u8_in_text(text):
    return M3U8_RE.findall(text)


def canonicalize(url, base=PAGE_URL):
    return urljoin(base, url)


def choose_best(urls):
    # heuristik sederhana: pilih url terpanjang (jika parameter token ada) atau pertama dari rri domain
    if not urls:
        return None
    # prefer urls containing 'rri' or 'rri.co.id'
    for u in urls:
        if 'rri' in u:
            return u
    # else longuest
    return max(urls, key=len)


def resolve_final(url):
    try:
        r = requests.head(url, headers=HEADERS, allow_redirects=True, timeout=10)
        if r.status_code // 100 == 2:
            return r.url
        else:
            # fallback to GET
            r = requests.get(url, headers=HEADERS, allow_redirects=True, timeout=10)
            r.raise_for_status()
            return r.url
    except Exception:
        return url


def main():
    try:
        r = requests.get(PAGE_URL, headers=HEADERS, timeout=15)
        r.raise_for_status()
    except Exception as e:
        print("ERROR: gagal ambil halaman:", e, file=sys.stderr)
        sys.exit(1)

    text = r.text
    found = set(find_m3u8_in_text(text))

    # parse inline scripts & attributes
    soup = BeautifulSoup(text, "html.parser")

    # search script tags
    for s in soup.find_all('script'):
        if s.string:
            found.update(find_m3u8_in_text(s.string))

    # search for source tags or video tags with src/data-src
    for tag in soup.find_all(True):
        for attr in ('src', 'data-src', 'data-href'):
            if tag.has_attr(attr):
                val = tag[attr]
                if '.m3u8' in val:
                    found.add(canonicalize(val))

    # also search the whole page for possible relative .m3u8 (rare)
    rels = re.findall(r"[\'\"](.*?\.m3u8)[\'\"]", text)
    for rurl in rels:
        found.add(canonicalize(rurl))

    found = list(found)
    if not found:
        print("ERROR: tidak ditemukan link .m3u8 di halaman.", file=sys.stderr)
        sys.exit(2)

    candidate = choose_best(found)
    final = resolve_final(candidate)

    # Make a simple master playlist containing the final URL
    playlist = "#EXTM3U\n# Generated by rri-m3u8-updater\n{}\n".format(final)

    # read existing file if exists
    try:
        with open(OUT_FILE, 'r', encoding='utf-8') as f:
            old = f.read()
    except FileNotFoundError:
        old = None

    if old == playlist:
        print("No change: rri.m3u8 unchanged.")
        return

    with open(OUT_FILE, 'w', encoding='utf-8') as f:
        f.write(playlist)

    print("Wrote {} with URL: {}".format(OUT_FILE, final))


if __name__ == '__main__':
    main()
